---
- name: Setup environment vars
  block:
    - name: Install Red Hat Ansible Automation Platform
      ansible.builtin.include_role:
        name: install_operator
      vars:
        install_operator_action: install
        install_operator_namespace: "{{ aap_operator_project }}"
        install_operator_name: "{{ aap_operator_operator_name }}"
        install_operator_csv_nameprefix: "{{ aap_operator_operator_csv_nameprefix }}"
        install_operator_manage_namespaces:
          - "{{ aap_operator_project }}"
        install_operator_channel: "{{ aap_operator_operator_channel }}"
        install_operator_catalog: "{{ aap_operator_operator_catalog }}"
        install_operator_automatic_install_plan_approval: >-
          {{ aap_operator_automatic_install_plan_approval }}
        install_operator_starting_csv: "{{ aap_operator_starting_csv }}"
        install_operator_catalogsource_setup: "{{ aap_operator_use_catalog_snapshot }}"
        install_operator_catalogsource_name: "{{ aap_operator_catalogsource_name }}"
        install_operator_catalogsource_namespace: "{{ aap_operator_project }}"
        install_operator_catalogsource_image: >-
         {{ aap_operator_catalog_snapshot_image }}
        install_operator_catalogsource_image_tag: >-
          {{ aap_operator_catalog_snapshot_image_tag }}

    - name: Create AAP admin secret
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'admin_secret.j2') }}"

    - name: Create Lightspeed
      when: aap_operator_disable_lightspeed is not true
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'lightspeed_secret.j2') }}"

    - name: Create Ansilbe Automation Platform
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'aap.j2') }}"


- name: Wait until all AAP2 Operators are running
  block:
    - name: Wait until the Automation Controller Manager operator is running
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Deployment
        name: automation-controller-operator-controller-manager
        namespace: "{{ aap_operator_project }}"
      register: r_aap_controller_manager_operator
      until:
        - r_aap_controller_manager_operator.resources[0].status.readyReplicas is defined
        - "r_aap_controller_manager_operator.resources[0].status.replicas == \
            r_aap_controller_manager_operator.resources[0].status.readyReplicas"
      retries: 30
      delay: 10

    - name: Wait until the Automation Hub Manager operator is running
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Deployment
        name: automation-hub-operator-controller-manager
        namespace: "{{ aap_operator_project }}"
      register: r_aap_hub_manager_operator
      until:
        - r_aap_hub_manager_operator.resources[0].status.readyReplicas is defined
        - "r_aap_hub_manager_operator.resources[0].status.replicas == \
            r_aap_hub_manager_operator.resources[0].status.readyReplicas"
      retries: 30
      delay: 10

    - name: Wait until the Automation Resource Manager operator is running
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Deployment
        name: resource-operator-controller-manager
        namespace: "{{ aap_operator_project }}"
      register: r_aap_resource_manager_operator
      until:
        - r_aap_resource_manager_operator.resources[0].status.readyReplicas is defined
        - "r_aap_resource_manager_operator.resources[0].status.replicas == \
            r_aap_resource_manager_operator.resources[0].status.readyReplicas"
      retries: 30
      delay: 10

    - name: Retrieve created route
      kubernetes.core.k8s_info:
        api_version: "route.openshift.io/v1"
        kind: Route
        name: "{{ aap_operator_app_name }}"
        namespace: "{{ aap_operator_project }}"
      register: r_route
      until: r_route.resources[0].spec.host is defined
      retries: 30
      delay: 45

    - name: Get automation_controller route hostname
      ansible.builtin.set_fact:
        automation_controller_hostname: "{{ r_route.resources[0].spec.host }}"

    - name: Wait for automation_controller to be running
      ansible.builtin.uri:
        url: http://{{ automation_controller_hostname }}/api/controller/v2/ping/
        status_code: 200
      register: r_result
      until: r_result.json.version is defined
      retries: 60
      delay: 45


- name: Inject AAP Manifest
  when: aap_operator_inject_manifest | bool
  block:
    - name: Do inject
      ansible.controller.license:
        manifest: "{{ aap_operator_inject_manifest_path }}"
        controller_host: "https://{{ automation_controller_hostname }}"
        controller_username: admin
        controller_password: "{{ aap_operator_admin_password }}"
        validate_certs: true
      register: r_aap_license

# Make sure to inject the manifest before creating the rolebinding;
# otherwise, Ansible Automation Platform will fail during the manifest
# upload process from the console.
- name: Create Rolebinding for Rulebook Activations for OpenShift events
  when:
    - aap_operator_inject_manifest | bool
    - aap_operator_create_eda_rolebinding | bool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'eda_cluster_rolebinding.j2') }}"
    minutes: "{{ aap_operator_extra_wait_minutes }}"

- name: Set facts for Access information
  ansible.builtin.set_fact:
    aap_controller_web_url: "https://{{ automation_controller_hostname }}"
    aap_controller_admin_user: "{{ aap_operator_admin_username | default('admin') }}"
    aap_controller_admin_password: "{{ aap_operator_admin_password }}"

- name: Set facts for CasC
  ansible.builtin.set_fact:
    aap_hostname: "https://{{ automation_controller_hostname }}"
    aap_username: "{{ aap_operator_admin_username | default('admin') }}"
    aap_password: "{{ aap_operator_admin_password }}"

- name: Print Access information
  ansible.builtin.debug:
    msg:
      - aap_controller_web_url: "https://{{ automation_controller_hostname }}"
      - aap_controller_admin_user: "{{ aap_operator_admin_username | default('admin') }}"

- name: Print Access information
  ansible.builtin.debug:
    msg:
      - aap_controller_admin_password: "{{ aap_operator_admin_password }}"
  when:
    - hide_passwords is not defined

# Leave this as the last task in the playbook.
- name: Workload tasks complete
  when: not silent | bool
  ansible.builtin.debug:
    msg: "Workload Tasks completed successfully."
