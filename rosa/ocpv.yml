---
- name: Configure 'AWS with ROSA Open Environment' for Ansible Product-Demos with OCP-V
  hosts: localhost
  tasks:
    - name: Warning this may incur high costs
      ansible.builtin.pause:
        msg: "This may incur high costs, please acknowledge responsibility"

    - name: Slurp credentials
      ansible.builtin.include_role:
        name: rosa_creds
      vars:
        creds_file_path: "{{ playbook_dir }}/{{ creds_file | default('../rosa.creds') }}"

    - name: Check that manifest exists
      ansible.builtin.stat:
        path: "{{ aap_manifest_path }}"
      register: stat_result

    - name: Assertion for required variables
      ansible.builtin.assert:
        that: 
          - rosa_bastion_host|length > 0
          - rosa_bastion_password|length > 0
          - rosa_bastion_user|length > 0
          - aws_access_key|length > 0
          - aws_secret_key|length > 0
          - openshift_api_url|length > 0
          - openshift_admin_password|length > 0
          - aap_admin_password|length > 0
          - aap_manifest_path|length > 0
          - aap_machine_cred_priv_key|length > 0
          - stat_result.stat.exists
          # ensure RSA key
          - aap_machine_cred_priv_key is regex('^-----BEGIN (?:RSA|OPENSSH) PRIVATE KEY-----\n(.+\n)+-----END (?:RSA|OPENSSH) PRIVATE KEY-----\s*$')
          # enforce Windows password requirements
          - aap_machine_cred_password|length >= 8
          - ( (aap_machine_cred_password | regex_search('[A-Z]') | ternary(1, 0)) +
              (aap_machine_cred_password | regex_search('[a-z]') | ternary(1, 0)) +
              (aap_machine_cred_password | regex_search('[0-9]') | ternary(1, 0)) +
              (aap_machine_cred_password | regex_search('[!@#$%^&*(),.?":{}|<>]') | ternary(1, 0))
            ) >= 3

    - name: Add ROSA bastion to inventory
      ansible.builtin.add_host:
        name: "{{ rosa_bastion_host }}"
        groups: "rosa"
        ansible_password: "{{ rosa_bastion_password }}"
        ansible_user: "rosa"

    - name: Get OC login status
      ansible.builtin.command: "oc whoami"
      register: oc_whoami
      ignore_errors: true

    - name: Reset ROSA cluster-admin
      when: oc_whoami is failed
      delegate_to: "{{ groups['rosa'] | first }}"
      block:
        - name: Get the list of ROSA clusters
          ansible.builtin.shell: "rosa list cluster -o json"
          register: rosa_cluster_list
          changed_when: false
          failed_when: rosa_cluster_list.rc != 0
          check_mode: no

        - name: Set cluster_name fact from the output
          ansible.builtin.set_fact:
            cluster_name: "{{ (rosa_cluster_list.stdout | from_json)[0]['name'] }}"
            rosa_availability_zone: "{{ (rosa_cluster_list.stdout | from_json)[0]['nodes']['availability_zones'][0] }}"

        - name: Display the extracted cluster name (for debugging)
          ansible.builtin.debug:
            msg: "Found cluster name: {{ cluster_name }}"
          when: 
            - "ansible_debug is defined"
            - "ansible_debug"

        - name: Delete the admin user on the specified cluster
          ansible.builtin.command: "rosa delete admin -c {{ cluster_name }} --yes"
          register: rosa_admin_creation
          changed_when: "'Admin user created' in rosa_admin_creation.stdout"
          ignore_errors: true

        - name: Create the admin user on the specified cluster
          ansible.builtin.command: "rosa create admin -c {{ cluster_name }} -p {{ openshift_admin_password }}"
          register: rosa_admin_creation
          changed_when: "'Admin user created' in rosa_admin_creation.stdout"

        - name: Extract the 'oc login' command line from the output
          ansible.builtin.set_fact:
            login_command_line: "{{ rosa_admin_creation.stdout_lines | select('match', '.*oc login.*') | first | trim }}"
          when: "'oc login' in rosa_admin_creation.stdout"

        - name: Set credential facts from the login command
          ansible.builtin.set_fact:
            rosa_url: "{{ login_command_line.split()[2] }}"
            rosa_username: "{{ login_command_line.split()[4] }}"
            rosa_password: "{{ login_command_line.split()[6] }}"
          when: login_command_line is defined and login_command_line != ""

    - name: Do local tasks if login required
      when: oc_whoami is failed
      block:
        - name: Login to OCP Cluster with new credentials
          ansible.builtin.command: "{{ login_command_line }}"
          register: oc_login
          changed_when: "'Login successful' in oc_login.stdout"
          retries: 30
          delay: 5
    
    - name: Determine metal node availability
      delegate_to: "{{ groups['rosa'] | first }}"
      block:
        - name: Get the list of ROSA clusters
          ansible.builtin.shell: "rosa list cluster -o json"
          register: rosa_cluster_list
          changed_when: false
          failed_when: rosa_cluster_list.rc != 0
          check_mode: no

        - name: Set cluster_name fact from the output
          ansible.builtin.set_fact:
            cluster_name: "{{ (rosa_cluster_list.stdout | from_json)[0]['name']}}"
            rosa_availability_zone: "{{ (rosa_cluster_list.stdout | from_json)[0]['nodes']['availability_zones'][0] }}"

        - name: Get machinepools
          ansible.builtin.command: "rosa list machinepool --cluster={{ cluster_name }} -o json"
          register: machinepools

        - name: Add virt machinepool
          ansible.builtin.command: "rosa create machinepool --cluster={{ cluster_name }} --replicas 1 --availability-zone={{ rosa_availability_zone }} --instance-type m5zn.metal  --name rosa-virt"
          when: machinepools.stdout | from_json | length < 2

    - name: Deploy AAP 2.5+ Operator
      ansible.builtin.include_role:
        name: 'ocp4_workload_ansible_automation_platform_25'
        tasks_from: workload
      vars: 
        aap_controller_admin_password: "{{ aap_admin_password }}"
        ocp4_workload_ansible_automation_platform_inject_manifest: true
        ocp4_workload_ansible_automation_platform_inject_manifest_path: "{{ aap_manifest_path }}"
        ocp4_workload_ansible_automation_platform_catalog_snapshot_image_tag: "v4.19_2025_07_21"

    - name: Ansible Product-Demos Boostrap 
      ansible.builtin.include_role:
        name: 'apd'

    - name: Show bearer token
      ansible.builtin.command: "oc whoami --show-token"
      register: oc_whoami
      ignore_errors: true

    - name: Set OCP bearer token
      ansible.builtin.set_fact:
        openshift_bearer_token: "{{ oc_whoami.stdout }}"

    - name: Configure credentials we are aware of
      ansible.builtin.include_role:
        name: infra.aap_configuration.dispatch
      vars:
        controller_credentials:
          - name: Demo Credential
            credential_type: Machine
            update_secrets: true
            organization: Default
            inputs:
              username: "admin"
              password: "{{ aap_machine_cred_password }}"
              ssh_key_data: "{{ aap_machine_cred_priv_key }}"

          - name: AWS
            credential_type: Amazon Web Services
            organization: Default
            inputs:
              username: "{{ aws_access_key }}"
              password: "{{ aws_secret_key }}"

          - name: OpenShift Credential
            credential_type: "OpenShift or Kubernetes API Bearer Token"
            organization: Default
            inputs:
              host: "{{ openshift_api_url }}"
              bearer_token: "{{ openshift_bearer_token }}"

        controller_launch_jobs:
          - name: "Product Demos | Single demo setup"
            wait: true
            extra_vars:
              demo: "openshift"

          - name: "OpenShift / CNV / Install Operator"
            wait: true

    - name: Build CNV storage class
      kubernetes.core.k8s:
        wait: true
        state: "present"
        definition:
          kind: StorageClass
          apiVersion: storage.k8s.io/v1
          metadata:
            name: virt-gp3-csi
            annotations:
              storageclass.kubevirt.io/is-default-virt-class: 'true'
          provisioner: ebs.csi.aws.com
          parameters:
            encrypted: 'true'
            type: gp3
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          volumeBindingMode: Immediate
          
    - name: Wait if metal node is still coming up
      delegate_to: "{{ groups['rosa'] | first }}"
      block:
        - name: Wait until virt hosts comes up
          ansible.builtin.command: "rosa list machinepool --cluster={{ cluster_name }} -o json"
          register: machinepools
          changed_when: false
          until: >
            (machinepools.stdout | from_json
            | selectattr('id', 'equalto', 'rosa-virt')
            | list)[0].status.current_replicas == 1
          retries: 75
          delay: 20
...
