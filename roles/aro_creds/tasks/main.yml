---
- name: Slurp the entire contents of creds file
  ansible.builtin.slurp:
    src: "{{ aro_creds_file_path | default('../aro.creds') }}"
  register: slurp_result

- name: Decode the file content and set as a fact
  ansible.builtin.set_fact:
    file_content: "{{ slurp_result.content | b64decode }}"

- name: Decode the file content and set as a fact
  ansible.builtin.debug:
    msg: "{{ file_content | regex_search('Resource Group\\n\\n([^\\s]+)', '\\1') | first }}"

- name: Extract key variables using regular expressions
  ansible.builtin.set_fact:
    # These are provided from RHPD
    openshift_console_url: "{{ file_content | regex_search('Your ARO Console\\n+(https://[^/]+)', '\\1') | first }}"
    openshift_kubeadmin_password: "{{ file_content | regex_search('Username\\s+kubeadmin\\s+Password\\s+([^\\s]+)', '\\1') | first }}"

    # ARO
    azure_resourcegroup: "{{ file_content | regex_search('Resource Group\\n\\n([^\\s]+)', '\\1') | first }}"
    azure_client_id: "{{ file_content | regex_search('Application/Client/Service Principal ID\\n+([^\\s]+)', '\\1') | first }}"
    azure_password: "{{ file_content | regex_search('2 - Your Azure Environment Details(?:.|\\n)*?Password\\n\\n([^\\s]+)', '\\1') | first }}"
    azure_tenant: "{{ file_content | regex_search('Tenant ID\\n\\n([^\\s]+)', '\\1') | first }}"
    azure_subscription: "{{ file_content | regex_search('Subscription ID\\n\\n([^\\s]+)', '\\1') | first }}"

    # These are user-provided
    openshift_admin_password: "{{ file_content | regex_search('OPENSHIFT_ADMIN_PASSWORD:\\s*(\\S+)', '\\1') | first }}"
    aap_admin_password: "{{ file_content | regex_search('AAP_ADMIN_PASSWORD:\\s*(\\S+)', '\\1') | first }}"
    aap_manifest_path: "{{ file_content | regex_search('AAP_MANIFEST_PATH:\\s*(\\S+)', '\\1') | first }}"
    aap_machine_cred_password: "{{ file_content | regex_search('AAP_MACHINE_CRED_PASSWORD:\\s*(\\S+)', '\\1') | first }}"
    aap_machine_cred_priv_key: "{{ file_content | regex_search('-----BEGIN (?:RSA|OPENSSH) PRIVATE KEY-----[\\s\\S]*-----END (?:RSA|OPENSSH) PRIVATE KEY-----') }}" # noqa: yaml[line-length]
    aap_machine_cred_pub_key: "{{ file_content | regex_search('^ssh-rsa.*$', multiline=True) }}"
    aap_operator_chatbot_token: "{{ file_content | regex_search('CHATBOT_TOKEN:\\s*(\\S+)', '\\1') | first }}"
    # Other optional things
    # apd_git_repo: "{{ file_content | regex_search('APD_GIT_REPO:\\s*(\\S+)', '\\1') | default('https://github.com/ansible/product-demos')}}"
    # apd_git_repo_branch: "{{ file_content | regex_search('APD_GIT_REPO_BRANCH:\\s*(\\S+)', '\\1') | default('main') }}"
  when: file_content is defined

- name: Derive OpenShift API URL from Console URL
  ansible.builtin.set_fact:
    openshift_api_url: "{{ openshift_console_url | regex_replace('^https://console-openshift-console.apps', 'https://api') }}:6443"
  when: file_content is defined

- name: Build azure profile data structure
  ansible.builtin.set_fact:
    azure_profile:
      default:
        subscription_id: "{{ azure_subscription }}"
        client_id: "{{ azure_client_id }}"
        secret: "{{ azure_password }}"
        tenant: "{{ azure_tenant }}"

- name: Create .azure directory # noqa: risky-file-permissions
  ansible.builtin.file:
    path: "~/.azure"
    state: directory
  register: azure_dir

- name: Build special azure file # noqa: risky-file-permissions
  ansible.builtin.copy:
    content: "{{ azure_profile | community.general.to_ini }}"
    dest: "{{ azure_dir.path }}/credentials"

- name: Check that manifest exists
  ansible.builtin.stat:
    path: "{{ aap_manifest_path }}"
  register: stat_result

- name: Assertion for required variables
  ansible.builtin.assert:
    that:
      - openshift_console_url|length > 0
      - openshift_kubeadmin_password|length > 0
      - azure_resourcegroup|length > 0
      - azure_client_id|length > 0
      - azure_password|length > 0
      - azure_tenant|length > 0
      - azure_subscription|length > 0
      - aap_admin_password|length > 0
      - aap_manifest_path|length > 0
      - aap_machine_cred_priv_key|length > 0
      - stat_result.stat.exists
      # ensure RSA key
      - aap_machine_cred_priv_key is regex('^-----BEGIN (?:RSA|OPENSSH) PRIVATE KEY-----\n(.+\n)+-----END (?:RSA|OPENSSH) PRIVATE KEY-----\s*$')
      # enforce Windows password requirements
      - aap_machine_cred_password|length >= 8
      - ( (aap_machine_cred_password | regex_search('[A-Z]') | ternary(1, 0)) +
          (aap_machine_cred_password | regex_search('[a-z]') | ternary(1, 0)) +
          (aap_machine_cred_password | regex_search('[0-9]') | ternary(1, 0)) +
          (aap_machine_cred_password | regex_search('[!@#$%^&*(),.?":{}|<>]') | ternary(1, 0))
        ) >= 3

- name: Assertion for public key (when required)
  when: aro_creds_require_pub_key is defined and aro_creds_require_pub_key
  ansible.builtin.assert:
    that:
      - aap_machine_cred_pub_key|length > 0

- name: Assertion for required variables (lightspeed)
  when: aap_operator_disable_lightspeed is not true
  ansible.builtin.assert:
    that:
      - aap_operator_chatbot_token|length > 0
